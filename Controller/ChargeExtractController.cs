using AutoMapper;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using WCDS.WebFuncions.Core.Context;
using WCDS.WebFuncions.Core.Entity;
using WCDS.WebFuncions.Core.Model.ChargeExtract;
using WCDS.WebFuncions.Core.Services;

namespace WCDS.WebFuncions.Controller
{
    public interface IChargeExtractController
    {
        public ChargeExtractResponseDto? CreateChargeExtract(CreateChargeExtractRequestDto chargeExtractReq);
        public ChargeExtractResponseDto GetChargeExtract(string chargeExtractId);
        public bool InvoiceAlreadyExtracted(string invoiceId, string contractNumber);
    }
    public class ChargeExtractController : IChargeExtractController
    {
        ApplicationDBContext _dbContext;
        ILogger _logger;
        IMapper _mapper;
        CreateChargeExtractRequestDto _requestDto;
        ChargeExtractResponseDto _responseDto;
        List<InvoiceOtherCostDetails> _otherCosts;
        List<InvoiceTimeReportCostDetails> _timeReportCosts;
        List<ChargeExtractRowDto> _unGroupedRows;
        List<Invoice> _updatedInvoices;
        List<ChargeExtract> _newChargeExtracts;
        List<string> _filesPutInAzureStorage;

        int _maxNumberOfCostItems = 995;
        StringBuilder _output;
        bool _abort = false;

        private const string DEFAULT_USER = "System";

        public ChargeExtractController(ILogger log, IMapper mapper)
        {
            _dbContext = new ApplicationDBContext();
            _responseDto = new ChargeExtractResponseDto();
            _otherCosts = new List<InvoiceOtherCostDetails>();
            _timeReportCosts = new List<InvoiceTimeReportCostDetails>();
            _unGroupedRows = new List<ChargeExtractRowDto>();

            _updatedInvoices = new List<Invoice>();
            _newChargeExtracts = new List<ChargeExtract>();
            _filesPutInAzureStorage = new List<string>();

            _logger = log;
            _mapper = mapper;
        }

        public ChargeExtractResponseDto? CreateChargeExtract(CreateChargeExtractRequestDto chargeExtractReq)
        {
            bool _singleFileExtract = true;
            _requestDto = chargeExtractReq;

            // invoices to process
            var _invoicesToProcess = _dbContext.Invoice.Include(p => p.InvoiceOtherCostDetails).Include(p => p.InvoiceTimeReportCostDetails)
                                    .Where(p => chargeExtractReq.Invoices.Contains(p.InvoiceId.ToString())
                                            && p.ContractNumber == chargeExtractReq.ContractNumber).ToList();

            // vendor list we need to process because extracts are generated by vendors
            var _vendors = _invoicesToProcess.Select(p => p.VendorBusinessId).Distinct().ToList();
            foreach (var vendor in _vendors)
            {
                try
                {
                    var _vendorInvoices = _invoicesToProcess.Where(p => p.VendorBusinessId == vendor).ToList();
                    _vendorInvoices.ForEach(p =>
                    {
                        if (p.InvoiceOtherCostDetails.Count > 0)
                            _otherCosts.AddRange(p.InvoiceOtherCostDetails);

                        if (p.InvoiceTimeReportCostDetails.Count > 0)
                            _timeReportCosts.AddRange(p.InvoiceTimeReportCostDetails);

                        _unGroupedRows.AddRange(_timeReportCosts.Select(q => new ChargeExtractRowDto()
                        { InvoiceNumber = p.InvoiceNumber, InvoiceAmount = q.Cost, CostCenter = q.CostCenter, InternalOrder = q.InternalOrder, Fund = q.Fund }));

                        _unGroupedRows.AddRange(_otherCosts.Select(r => new ChargeExtractRowDto()
                        { InvoiceNumber = p.InvoiceNumber, InvoiceAmount = r.Cost, CostCenter = r.CostCentre, InternalOrder = r.InternalOrder, Fund = r.Fund }));
                    });

                    var _groupedRows = _unGroupedRows.GroupBy(x => new { x.InvoiceNumber, x.CostCenter, x.InternalOrder, x.Fund })
                                                    .Select(y => new { id = y.Key, total = y.Sum(x => x.InvoiceAmount) });

                    decimal grandTotal = _groupedRows.Sum(x => x.total);

                    if (_groupedRows.Count() > _maxNumberOfCostItems)
                        _singleFileExtract = false;

                    if (_singleFileExtract)
                        _abort = !ProcessSingleFileExtract(vendor, _vendorInvoices);
                    else
                        _abort = !ProcessMultiFileExtract(vendor, _vendorInvoices);

                    _otherCosts = new List<InvoiceOtherCostDetails>();
                    _timeReportCosts = new List<InvoiceTimeReportCostDetails>();

                    if (_abort)
                        break;
                }
                catch (Exception ex)
                {
                    _abort = true;
                    _logger.LogError(string.Format("CreateChargeExtract: An error has occured while creating extract for Vendor: {0}, ErrorMessage: {1}, InnerException: {2}", vendor, ex.Message, ex.InnerException));
                }
            } // End of Foreach of Vendors

            // Clean any data if created in the database and throw back null
            if (_abort)
            {
                //Delete files from Azure
                AzureStorageController azureStorageController = new AzureStorageController(_logger, _mapper);
                foreach (var item in _filesPutInAzureStorage)
                {
                    bool success = azureStorageController.CheckFileExistsAsync(item).GetAwaiter().GetResult();
                    if (success)
                    {
                        _logger.LogInformation(string.Format("File found: {0}", item));
                        success = azureStorageController.DeleteFileAsync(item).GetAwaiter().GetResult();
                        if (success)
                            _logger.LogInformation(string.Format("File : {0} ---- deleted from server.", item));
                    }
                    else
                    {
                        _logger.LogError(string.Format("File : {0}  --- not found on server.", item));
                    }
                }

                // Remove records from database
                using (IDbContextTransaction transaction = _dbContext.Database.BeginTransaction())
                {
                    foreach (var item in _updatedInvoices)
                    {
                        item.ChargeExtractId = null;
                        _dbContext.Invoice.Update(item);
                        _dbContext.SaveChanges();
                    }

                    _newChargeExtracts.ForEach(item =>
                    {
                        _dbContext.ChargeExtract.Remove(item);
                        _dbContext.SaveChanges();
                    });
                    transaction.Commit();
                }
                _responseDto = null;
            }

            return _responseDto;
        }

        /// <summary>
        /// Charge Extract - Multi File Scenario
        /// </summary>
        /// <param name="vendor"></param>
        /// <param name="invoices"></param>
        /// <returns></returns>
        private bool ProcessMultiFileExtract(string vendor, List<Invoice> invoices)
        {
            var _groupedRows = _unGroupedRows.GroupBy(x => new { x.InvoiceNumber, x.CostCenter, x.InternalOrder, x.Fund })
                                                        .Select(y => new { id = y.Key, total = y.Sum(x => x.InvoiceAmount) });
            decimal grandTotal = _groupedRows.Sum(x => x.total);
            bool result = true;
            _output = new StringBuilder();
            using (IDbContextTransaction transaction = _dbContext.Database.BeginTransaction())
            {
                try
                {
                    //First Row
                    _output.Append(GetFirstRow());
                    _output.Append("\r\n");

                    // Main Header Row
                    _output.Append(GetHeaderRow());
                    _output.Append("\r\n");

                    // Main Header Row Data
                    _output.Append(GetHeaderDataRow(_requestDto.ChargeExtractDateTime, vendor));
                    _output.Append("\r\n");
                    _output.Append(GetBlankRow());
                    _output.Append("\r\n");

                    // Detail Row Header
                    _output.Append(GetDetailHeaderRow());
                    _output.Append("\r\n");

                    //Detail Row Header Data
                    _output.Append(GetDetailHeaderDataRow(grandTotal));
                    _output.Append("\r\n");

                    // Get All break down rows
                    foreach (var item in _groupedRows)
                    {
                        _output.Append(GetDetailItemDataRow(item.id.InvoiceNumber, item.total * -1, item.id.CostCenter, item.id.InternalOrder, item.id.Fund, vendor));
                        _output.Append("\r\n");
                    }

                    string fileName = vendor + "-" + DateTime.UtcNow.ToString("yyyy-MM-dd_HH-mm-ss") + ".csv";
                    //string file = @"C:\Users\Iftikhar.Qamar\Downloads\" + fileName + ".csv";
                    //File.WriteAllText(file, _output.ToString());

                    // Create file in memory
                    byte[] byteArray = Encoding.ASCII.GetBytes(_output.ToString());
                    MemoryStream stream = new MemoryStream(byteArray);

                    // Write it to Azure


                    // Create transactions in database
                    ChargeExtractDto chargeExtractDto = new ChargeExtractDto();
                    ChargeExtractDetailDto chargeExtractDetailDto;
                    List<ChargeExtractDetailDto> chargeExtractDetailDtos = new List<ChargeExtractDetailDto>();

                    chargeExtractDto.ChargeExtractDateTime = _requestDto.ChargeExtractDateTime;
                    chargeExtractDto.AuditCreationDateTime = DateTime.UtcNow;
                    chargeExtractDto.RequestedBy = _requestDto.RequestedBy;
                    chargeExtractDto.ChargeExtractFileName = fileName;
                    chargeExtractDto.VendorId = vendor;
                    chargeExtractDto.AuditLastUpdatedDateTime = DateTime.UtcNow;
                    chargeExtractDto.ParentChargeExtractId = null;

                    invoices.ForEach(p =>
                    {
                        chargeExtractDetailDto = new ChargeExtractDetailDto();
                        chargeExtractDetailDto.InvoiceId = p.InvoiceId;
                        chargeExtractDetailDto.AuditCreationDateTime = DateTime.UtcNow;
                        chargeExtractDetailDto.AuditLastUpdatedBy = _requestDto.RequestedBy;
                        chargeExtractDetailDto.AuditLastUpdatedDateTime = DateTime.UtcNow;
                        chargeExtractDetailDtos.Add(chargeExtractDetailDto);
                    });

                    chargeExtractDto.ChargeExtractDetail = chargeExtractDetailDtos;
                    ChargeExtract CEEntity = _mapper.Map<ChargeExtract>(chargeExtractDto);
                    _dbContext.ChargeExtract.Add(CEEntity);
                    _dbContext.SaveChanges();

                    invoices.ForEach(p =>
                    {
                        p.ChargeExtractId = CEEntity.ChargeExtractId;
                        _dbContext.Invoice.Update(p);
                    });

                    _dbContext.SaveChanges();

                    _responseDto.ChargeExtract = _mapper.Map<ChargeExtractDto>(CEEntity);
                    _responseDto.ChargeExtract.ExtractFile = JsonConvert.SerializeObject(Convert.ToBase64String(byteArray));

                    // if all is good then create response object and commit chages
                    transaction.Commit();

                }
                catch (Exception ex)
                {
                    result = false;
                    _logger.LogError(string.Format("CreateChargeExtract:ProcessMultiFileExtract An error has occured while creating extract for Vendor: {0}, ErrorMessage: {1}, InnerException: {2}", vendor, ex.Message, ex.InnerException));
                }
            }


            return result;
        }

        /// <summary>
        /// Charge Extract - Single File Scenario
        /// </summary>
        /// <param name="vendor"></param>
        /// <param name="invoices"></param>
        /// <returns></returns>
        private bool ProcessSingleFileExtract(string vendor, List<Invoice> invoices)
        {
            var _groupedRows = _unGroupedRows.GroupBy(x => new { x.InvoiceNumber, x.CostCenter, x.InternalOrder, x.Fund })
                                                        .Select(y => new { id = y.Key, total = y.Sum(x => x.InvoiceAmount) });
            decimal grandTotal = _groupedRows.Sum(x => x.total);
            bool result = true;
            _output = new StringBuilder();

            using (IDbContextTransaction transaction = _dbContext.Database.BeginTransaction())
            {
                try
                {
                    //First Row
                    _output.Append(GetFirstRow());
                    _output.Append("\r\n");

                    // Main Header Row
                    _output.Append(GetHeaderRow());
                    _output.Append("\r\n");

                    // Main Header Row Data
                    _output.Append(GetHeaderDataRow(_requestDto.ChargeExtractDateTime, vendor));
                    _output.Append("\r\n");
                    _output.Append(GetBlankRow());
                    _output.Append("\r\n");

                    // Detail Row Header
                    _output.Append(GetDetailHeaderRow());
                    _output.Append("\r\n");

                    //Detail Row Header Data
                    _output.Append(GetDetailHeaderDataRow(grandTotal));
                    _output.Append("\r\n");

                    // Get All break down rows
                    foreach (var item in _groupedRows)
                    {
                        _output.Append(GetDetailItemDataRow(item.id.InvoiceNumber, item.total * -1, item.id.CostCenter, item.id.InternalOrder, item.id.Fund, vendor));
                        _output.Append("\r\n");
                    }

                    string fileName = vendor + "-" + DateTime.UtcNow.ToString("yyyy-MM-dd-HH-mm-ss") + ".csv";

                    // Create file in memory
                    byte[] byteArray = Encoding.ASCII.GetBytes(_output.ToString());
                    MemoryStream stream = new MemoryStream(byteArray);

                    // Write it to Azure
                    AzureStorageController azureStorageController = new AzureStorageController(_logger, _mapper);
                    bool success = azureStorageController.CheckFileExistsAsync(fileName).GetAwaiter().GetResult();
                    if (success)
                    {
                        _logger.LogInformation(string.Format("File already exists: {0}", fileName));
                        result = false;
                        return result;
                    }
                    else
                    {
                        success = azureStorageController.UploadFileAsync(fileName, byteArray.ToString()).GetAwaiter().GetResult();
                        if (success)
                        {
                            _logger.LogInformation(string.Format("File Uploaded: {0}", fileName));
                            _filesPutInAzureStorage.Add(fileName);
                        }

                    }

                    // Create transactions in database
                    ChargeExtractDto chargeExtractDto = new ChargeExtractDto();
                    ChargeExtractDetailDto chargeExtractDetailDto;
                    List<ChargeExtractDetailDto> chargeExtractDetailDtos = new List<ChargeExtractDetailDto>();

                    chargeExtractDto.ChargeExtractDateTime = _requestDto.ChargeExtractDateTime;
                    chargeExtractDto.AuditCreationDateTime = DateTime.UtcNow;
                    chargeExtractDto.RequestedBy = _requestDto.RequestedBy;
                    chargeExtractDto.ChargeExtractFileName = fileName;
                    chargeExtractDto.VendorId = vendor;
                    chargeExtractDto.AuditLastUpdatedDateTime = DateTime.UtcNow;
                    chargeExtractDto.ParentChargeExtractId = null;

                    invoices.ForEach(p =>
                    {
                        chargeExtractDetailDto = new ChargeExtractDetailDto();
                        chargeExtractDetailDto.InvoiceId = p.InvoiceId;
                        chargeExtractDetailDto.AuditCreationDateTime = DateTime.UtcNow;
                        chargeExtractDetailDto.AuditLastUpdatedBy = _requestDto.RequestedBy;
                        chargeExtractDetailDto.AuditLastUpdatedDateTime = DateTime.UtcNow;
                        chargeExtractDetailDtos.Add(chargeExtractDetailDto);
                    });

                    chargeExtractDto.ChargeExtractDetail = chargeExtractDetailDtos;
                    ChargeExtract CEEntity = _mapper.Map<ChargeExtract>(chargeExtractDto);
                    _dbContext.ChargeExtract.Add(CEEntity);
                    _dbContext.SaveChanges();

                    _newChargeExtracts.Add(CEEntity);

                    invoices.ForEach(p =>
                    {
                        p.ChargeExtractId = CEEntity.ChargeExtractId;
                        _dbContext.Invoice.Update(p);
                        _updatedInvoices.Add(p);
                    });

                    _dbContext.SaveChanges();

                    _responseDto.ChargeExtract = _mapper.Map<ChargeExtractDto>(CEEntity);
                    _responseDto.ChargeExtract.ExtractFile = JsonConvert.SerializeObject(Convert.ToBase64String(byteArray));

                    // if all is good then create response object and commit chages
                    transaction.Commit();
                }
                catch (Exception ex)
                {
                    result = false;
                    _logger.LogError(string.Format("CreateChargeExtract:ProcessSingleFileExtract An error has occured while creating extract for Vendor: {0}, ErrorMessage: {1}, InnerException: {2}", vendor, ex.Message, ex.InnerException));
                    transaction.Rollback();
                }
            }
            return result;
        }

        public ChargeExtractResponseDto GetChargeExtract(string chargeExtractId)
        {
            ChargeExtractResponseDto _response = new ChargeExtractResponseDto();

            return _response;
        }

        public bool InvoiceAlreadyExtracted(string invoiceId, string contractNumber)
        {
            bool bResult = false;
            using (IDbContextTransaction transaction = _dbContext.Database.BeginTransaction())
            {
                try
                {
                    Invoice invoice = _dbContext.Invoice.Where(x => x.InvoiceId.ToString() == invoiceId && x.ContractNumber == contractNumber).FirstOrDefault();
                    if (invoice != null)
                    {
                        if (invoice.ChargeExtractId != null)
                        {
                            bResult = true;
                        }
                    }
                }
                catch
                {
                    _logger.LogError("An error has occured while looking up invoice: " + invoiceId);
                    transaction.Rollback();
                    throw;
                }
            }
            return bResult;
        }


        #region create csv rows
        private StringBuilder GetBlankRow()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," +
                      "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," +
                      "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + ",");
            return sb;
        }
        private StringBuilder GetFirstRow()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("" + "," + "Journal Entry upload" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," +
                      "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," +
                      "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + ",");
            return sb;
        }
        private StringBuilder GetHeaderRow()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("Main row of getting data into the system" + "," + "HEADER (BH)" + "," + "Company Code" + "," + "Document Type" + "," + "Document Date" + "," +
                      "Posting Date" + "," + "Period" + "," + "Fiscal Year" + "," + "Ledger Group" + "," + "Currency Code" + "," + "Exchange Rate" + "," + "Reference" +
                      "," + "Document Header Text" + "," + "Document Number" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," +
                      "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + ",");
            return sb;
        }
        private StringBuilder GetHeaderDataRow(DateTime documentDate, string documentHeaderText)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("" + "," + "BH" + "," + "1000" + "," + "SA" + "," + documentDate.Day + "." + documentDate.Month + "." + documentDate.Year + "," +
                      "" + "," + "1gx" + "," + "1gx" + "," + "1gx" + "," + "CAD" + "," + "1gx" + "," + "1gx" +
                      "," + documentHeaderText + "," + "1gx" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," +
                      "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + ",");
            return sb;
        }
        private StringBuilder GetDetailHeaderRow()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("" + "," + "DETAIL(BD)" + "," + "Posting Key" + "," + "Account" + "," + "Special GL Indiactor" + "," + "Amount" + "," + "Tax Code" + ","
                    + "Tax Jurisdiction" + "," + "Transaction Type" + "," + "Cost Centre" + "," + "Internal Order" + "," + "Profit Centre" + "," + "WBS" + ","
                    + "Fund" + "," + "Fund Centre" + "," + "Commitment Item" + "," + "Earmarked Funds" + "," + "Earmarked Funds :Document Item" + "," + "Asset" + ","
                    + "Asset Sub Number" + "," + "Quantity" + "," + "Personnel Number" + "," + "Assignment" + "," + "Text" + "," + "Reference Key 2" + "," + "Reference Key 3" + ","
                    + "Refernce" + "," + "House Bank" + "," + "Partner Profit Center" + "," + "Functional Area" + ",");
            return sb;
        }
        private StringBuilder GetDetailHeaderDataRow(decimal grandTotal)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("Credit- Invoice totals submitted to 1GX" + "," + "BD" + "," + "40" + "," + "6010100100" + "," + "" + "," + grandTotal.ToString() + "," + "" + ","
                    + "" + "," + "" + "," + "600011" + "," + "" + "," + "1gx" + "," + "" + "," + "41" + "," + "1gx" + "," + "" + "," + "" + "," + "" + "," + "" + ","
                    + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + "," + "" + ",");
            return sb;
        }

        private StringBuilder GetDetailItemDataRow(string invoiceNumber, decimal amount, string cc, string io, string fund, string contractNumber)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("" + "," + "BD (" + invoiceNumber + ")" + "," + "50" + "," + "2040000120" + "," + "" + "," + amount.ToString() + "," + "" + ","
                    + "" + "," + "" + "," + cc + "," + io + "," + "1gx" + "," + "" + "," + fund + "," + "1gx" + "," + "" + "," + "" + "," + "" + "," + "" + ","
                    + "" + "," + "" + "," + "" + "," + "" + "," + invoiceNumber + "," + "" + "," + contractNumber + "," + "" + "," + "" + "," + "" + "," + "" + ",");
            return sb;
        }

        #endregion

    }
}
